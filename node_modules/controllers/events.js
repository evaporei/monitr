const express = require('express');
const router = express.Router();

const Page = require('../models/pages');
const cache = require('../middlewares/cache');

router.get('/api/events', async (req, res) => {

  cacheExists = await cache.getAsync('redisevents') || false;

  dStart = new Date();
  dEnd = new Date();

  ddEnd = new Date(dEnd.setDate(dStart.getDate() + 5));

  ssss = new Date(dStart.setUTCHours(0, 0, 0, 0)).toISOString();
  eeee = new Date(ddEnd.setUTCHours(23, 59, 59, 0)).toISOString();

  if (!cacheExists) {
    const notExists = await Page.aggregate([
      {
        $match: {
          "containsValueInArray": true
        }
      }, {
        $match: {
          "events.start_time": {
            $gte: ssss,
            $lt: eeee
          }
        }
      }, {
        $project: {
          "events": {
            $filter: {
              input: "$events",
              as: "stat",
              cond: {
                $and: [
                  {
                    $gte: ["$$stat.start_time", ssss,]
                  }, {
                    $lte: ["$$stat.start_time", eeee,]
                  },
                ]
              }
            }
          }
        }
      },
    ]);

    const pages = notExists.reduce(function (a, b) {
      return a.concat(b.events);
    }, []);

    const save = await cache.setex('redisevents', 300, JSON.stringify(pages));

    return res.status(201).send({pages: pages});
  }

  return res.status(200).send({pages: JSON.parse(cacheExists)});
});

router.post('/api/events', async (req, res) => {

  var dateStart = convertDateToUTC(new Date(req.body.dateStart));
  var dateEnd = convertDateToUTC(new Date(req.body.dateEnd));
  var categories = req.body.categories;
  var city = req.body.city;

  const filteredEvents = await Page.aggregate([
    {
      $addFields: {
        "containsCategoriesInArray": {
          $cond: [
            {
              $setIsSubset: [["$category"], categories,]
            },
            true,
            false,
          ]
        }
      }
    }, {
      $addFields: {
        "containsCityInArray": {
          $cond: [
            {
              $setIsSubset: [["$city"], [city],]
            },
            true,
            false,
          ]
        }
      }
    }, {
      $match: {
        "containsCategoriesInArray": true,
        "containsCityInArray": true,
      }
    }, {
      $match: {
        "events.start_time": {
          $gte: dateStart,
          $lt: dateEnd
        }
      }
    }, {
      $project: {
        "events": {
          $filter: {
            input: "$events",
            as: "stat",
            cond: {
              $and: [
                {
                  $gte: ["$$stat.start_time", dateStart,]
                }, {
                  $lte: ["$$stat.start_time", dateEnd,]
                },
              ]
            }
          }
        }
      }
    },
  ]);

  const responsePages = filteredEvents.reduce(function (a, b) {
    return a.concat(b.events);
  }, []);

  return res.status(201).send({pages: responsePages});
});

router.post('/api/events/generic', async (req, res) => {

  var dateStart = convertDateToUTC(new Date(req.body.dateStart));
  var dateEnd = convertDateToUTC(new Date(req.body.dateEnd));
  var categories = req.body.categories;
  var city = req.body.city;

  const filteredEvents = await Page.aggregate([
    {
      $addFields: {
        "containsCategoriesInArray": {
          $cond: [
            {
              $setIsSubset: [["$category"], categories,]
            },
            true,
            false,
          ]
        }
      }
    }, {
      $addFields: {
        "containsCityInArray": {
          $cond: [
            {
              $setIsSubset: [["$city"], [city],]
            },
            true,
            false,
          ]
        }
      }
    }, {
      $match: {
        "containsCategoriesInArray": true,
        "containsCityInArray": true,
      }
    }, {
      $match: {
        "events.start_time": {
          $gte: dateStart,
          $lt: dateEnd
        }
      }
    }, {
      $project: {
        "events": {
          $filter: {
            input: "$events",
            as: "stat",
            cond: {
              $and: [
                {
                  $gte: ["$$stat.start_time", dateStart,]
                }, {
                  $lte: ["$$stat.start_time", dateEnd,]
                },
              ]
            }
          }
        }
      }
    },
  ]);

  const responsePages = filteredEvents.reduce(function (a, b) {
    return a.concat(b.events);
  }, []);

  return res.status(201).send({pages: responsePages});
});

function convertDateToUTC(date) {
  return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
}
module.exports = router;
