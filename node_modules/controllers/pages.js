const express = require('express');
const router = express.Router();

const Page = require('../models/pages');
const cache = require('../middlewares/cache');

const { isNumeric } = require('../helpers/utils');
const { searchEvents, searchPage } = require('../helpers/graphSearch');

router.post('/api/pages', async(req, res) => {
  var searchWord = req.body.searchWord || false;

  if (! isNumeric(searchWord)) {
    const searchByName = await searchPage(searchWord);
    const searchWord = searchByName.id;
  }

  deleteKey = await cache.del('redispages');

  const findPage = await Page.findOne({ facebookId: searchWord });

  if (findPage) {
    return res.status(409)
      .send({
        message: 'Page already registered'
      });
  }

  const response = await searchEvents(searchWord);

  const newPage = new Page({
    facebookId: searchWord,
    category: req.body.category,
    name: response.name,
    picture: response.picture.data.url,
    events: response.events.data,
    city: response.location.city,
    rating: response.overall_star_rating,
    eventsCount: response.events.data.length
  });

  const page = await newPage.save();

  return res.status(200)
    .send({ message: 'Page registered!' });
});

router.post('/api/pages/refresh', async(req, res) => {
  const pageId = req.body.pageId;

  deleteKey = await cache.del('redispages');

  const findPage = await Page.findOne({ _id: pageId });

  if (! findPage) {
    return res.status(404)
      .send({ message: 'Page not found' });
  }

  const response = await searchEvents(findPage.facebookId);

  findPage.picture = response.picture.data.url;
  findPage.events = response.events.data;
  findPage.eventsCount = response.events.data.length;
  findPage.rating =  response.overall_star_rating;
  findPage.updated = Date.now();

  const page = await findPage.save();

  return res.status(200)
    .send({ message: 'Page registered!', result: findPage });
});

router.get('/api/pages', async(req, res) => {
  cacheExists = await cache.getAsync('redispages') || false;

  if (! cacheExists) {
    const notExists = await Page.find({}).lean();

    const pages = notExists.map((page) => page.events = undefined)

    const save = await cache.setex('redispages', 60, JSON.stringify(notExists));

    return res.status(201)
      .send({ pages: notExists });
  }

  return res.status(200)
    .send({ pages: JSON.parse(cacheExists) });
});

router.delete('/api/pages/:id', async(req, res) => {
  deleteKey = await cache.del('redispages');

  const findPages = await Page.remove({ _id: req.params.id });

  if (! findPages) {
    return res.status(404)
    .send({ message: 'Page not found!' });
  }

  return res.status(200)
  .send({ message: 'Page removed!', result: findPages });
});

module.exports = router;
